/* Generated By:JavaCC: Do not edit this line. SPARQLParser.java */
package parser;

import java.net.URI;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.LinkedHashSet;

import org.semanticweb.kaon2.api.*;
import org.semanticweb.kaon2.api.owl.elements.*;
import org.semanticweb.kaon2.api.logic.*;
import org.semanticweb.kaon2.api.reasoner.*;

import org.semanticweb.kaon2.datatype.*;

import edu.unika.aifb.vponmonet.OntologyMapping;

@SuppressWarnings("all")
public class VPSPARQLParser implements SPARQLParserConstants {
    protected final TripleConverter m_bodyTripleConverter=new BodyTripleConverter();
    protected final TripleConverter m_headTripleConverter=new HeadTripleConverter();
    protected boolean m_sparqlRecognized;
    protected OntologyMapping m_ontoMap;
    protected Query m_query;

    public Query parseQuery(OntologyMapping ontoMap, Namespaces namespaces) throws ParseException {
        try {
            m_sparqlRecognized=false;
            m_ontoMap = ontoMap;
            m_query=new Query(namespaces);
            Query();
            return m_query;
        }
        finally {
            m_query=null;
        }
    }
    public boolean getSPARQLRecognized() {
        return m_sparqlRecognized;
    }
    protected boolean containsObjectProperty(String objectPropertyURI) throws KAON2Exception {
    	return m_ontoMap.containsObjectProperty(objectPropertyURI);
    }
    protected boolean containsDataProperty(String dataPropertyURI) throws KAON2Exception {
    	return m_ontoMap.containsDataProperty(dataPropertyURI);
    }
    protected boolean containsAnnotationProperty(String annotationPropertyURI) throws KAON2Exception {
    	return false;
    }
    protected URI resolveURI(String uri) throws ParseException {
        try {
            return m_query.m_baseURI.resolve(uri);
        }
        catch (IllegalArgumentException e) {
            throw new ParseException("Invalid URI '"+uri+"'.");
        }
    }
    protected Term getArgument(Object value) {
        if (value instanceof Term)
            return (Term)value;
        else if (value instanceof URI)
            return KAON2Manager.factory().individual(value.toString());
        else
            return KAON2Manager.factory().constant(value);
    }
    protected ParseException parseException(Throwable error)  {
        ParseException parseException=new ParseException("Invalid datatype value.");
        parseException.initCause(error);
        return parseException;
    }

    public enum QueryType { SELECT,ASK,CONSTRUCT };

    public static class Query {
        public URI m_baseURI;
        public final Namespaces m_namespaces;
        public QueryType m_queryType;
        public boolean m_distinct;
        public boolean m_selectStar;
        public final List<Variable> m_distinguishedVariables;
        public String m_from;
        public GroupGraphPattern m_constructPattern;
        public final GroupGraphPattern m_wherePattern;
        public final List<Variable> m_sortVariables;
        public final List<Boolean> m_sortDirection;
        public int m_limit;
        public int m_offset;

        public Query(Namespaces namespaces) {
            m_baseURI=URI.create("opaque:uri");
            m_namespaces=namespaces;
            m_distinct=false;
            m_selectStar=false;
            m_distinguishedVariables=new ArrayList<Variable>();
            m_from=null;
            m_constructPattern=null;
            m_wherePattern=new GroupGraphPattern();
            m_sortVariables=new ArrayList<Variable>();
            m_sortDirection=new ArrayList<Boolean>();
            m_limit=-1;
            m_offset=0;
        }
    }

    public static class GroupGraphPattern {
        public final List<Literal> m_literals;
        public final List<NotPattern> m_notPatterns;
        public final List<OptionalPattern> m_optionalPatterns;
        public final List<UnionPattern> m_unionPatterns;

        public GroupGraphPattern() {
            m_literals=new ArrayList<Literal>();
            m_notPatterns=new ArrayList<NotPattern>(2);
            m_optionalPatterns=new ArrayList<OptionalPattern>(2);
            m_unionPatterns=new ArrayList<UnionPattern>(2);
        }
    }

    public static class NotPattern {
        public final GroupGraphPattern m_groupGraphPattern;

        public NotPattern() {
            m_groupGraphPattern=new GroupGraphPattern();
        }
    }

    public static class OptionalPattern {
        public final GroupGraphPattern m_groupGraphPattern;

        public OptionalPattern() {
            m_groupGraphPattern=new GroupGraphPattern();
        }
    }

    public static class UnionPattern {
        public final List<GroupGraphPattern> m_patterns;

        public UnionPattern() {
            m_patterns=new ArrayList<GroupGraphPattern>(2);
        }
    }

    protected class ExpressionHolder {
        protected final List<Variable> m_variables;
        protected final StringBuffer m_expression;

        public ExpressionHolder() {
            m_variables=new ArrayList<Variable>();
            m_expression=new StringBuffer();
        }
        public void append(Variable variable) {
            int variableIndex=m_variables.indexOf(variable);
            if (variableIndex==-1) {
                variableIndex=m_variables.size();
                m_variables.add(variable);
            }
            m_expression.append('$');
            m_expression.append(variableIndex+1);
            m_expression.append(' ');
        }
        public void append(String string) {
            m_expression.append(string);
        }
        public void append(int number) {
            m_expression.append(number);
        }
        public void append(double number) {
            m_expression.append(number);
        }
        public void append(char c) {
            m_expression.append(c);
        }
        public void appendData(Object object) {
            if (object instanceof String) {
                String value=(String)object;
                value=value.replace("\"","\\\"");
                m_expression.append('"');
                m_expression.append(value);
                m_expression.append('"');
            }
            else if (object instanceof Individual) {
                String value=((Individual)object).getURI();
                m_expression.append('<');
                m_expression.append(value);
                m_expression.append('>');
            }
            else {
                String datatypeURI=m_query.m_namespaces.abbreviateAsNamespace(DatatypeManager.INSTANCE.getDatatypeURI(object));
                String value=DatatypeManager.INSTANCE.toString(object);
                value=value.replace("\"","\\\"");
                m_expression.append('"');
                m_expression.append(value);
                m_expression.append("\"^^<");
                m_expression.append(datatypeURI);
                m_expression.append('>');
            }
        }
        public Literal toIfTrueLiteral() {
            String expression=m_expression.toString();
            Term[] terms=new Term[m_variables.size()+1];
            for (int i=0;i<m_variables.size();i++)
                terms[i+1]=m_variables.get(i);
            terms[0]=KAON2Manager.factory().constant(expression);
            PredicateSymbol ifTrue=KAON2Manager.factory().ifTrue(terms.length);
            return KAON2Manager.factory().literal(true,ifTrue,terms);
        }
        public Literal toEvaluateLiteral(Variable variable) {
            String expression=m_expression.toString();
            Term[] terms=new Term[m_variables.size()+2];
            for (int i=0;i<m_variables.size();i++)
                terms[i+1]=m_variables.get(i);
            terms[0]=KAON2Manager.factory().constant(expression);
            terms[terms.length-1]=variable;
            PredicateSymbol evaluate=KAON2Manager.factory().evaluate(terms.length);
            return KAON2Manager.factory().literal(true,evaluate,terms);
        }
    }

    protected static interface TripleConverter {
        Literal getLiteralForTriple(Object subject,Object predicate,Object object) throws ParseException;
    }

    protected class BodyTripleConverter implements TripleConverter {
        public Literal getLiteralForTriple(Object subject,Object predicate,Object object) throws ParseException {
            if (!(predicate instanceof URI))
                throw parseException(new KAON2Exception("Predicate '"+predicate.toString()+"' is not supported."));
            String predicateURI=predicate.toString();
            if ((Namespaces.RDF_NS+"type").equals(predicateURI)) {
                if (!(object instanceof URI))
                    throw parseException(new KAON2Exception("Object '"+object.toString()+"' is not supported in a 'rdf:type' pattern."));
                String objectURI=object.toString();
                OWLClass owlClass=KAON2Manager.factory().owlClass(objectURI);
                Term argument=getArgument(subject);
                return KAON2Manager.factory().literal(true,owlClass,new Term[] { argument });
            }
            else {
                try {
                    Predicate literalPredicate;
                    if ((Namespaces.OWL_NS+"sameIndividual").equals(predicateURI))
                        literalPredicate=KAON2Manager.factory().equal();
                    else if ((Namespaces.OWL_NS+"differentIndividuals").equals(predicateURI))
                        literalPredicate=KAON2Manager.factory().notEqual();
                    else if (containsObjectProperty(predicateURI))
                        literalPredicate=KAON2Manager.factory().objectProperty(predicateURI);
                    else if (containsDataProperty(predicateURI))
                        literalPredicate=KAON2Manager.factory().dataProperty(predicateURI);
                    else if (containsAnnotationProperty(predicateURI))
                        literalPredicate=KAON2Manager.factory().annotationProperty(predicateURI);
                    else
                        throw parseException(new KAON2Exception("Cannot determine if '"+predicateURI+"' is an object, a datatype or an annotation property."));
                    Term[] arguments=new Term[2];
                    arguments[0]=getArgument(subject);
                    arguments[1]=getArgument(object);
                    return KAON2Manager.factory().literal(true,literalPredicate,arguments);
                }
                catch (KAON2Exception error) {
                    throw parseException(error);
                }
            }
        }
    }

    protected class HeadTripleConverter implements TripleConverter {
        public Literal getLiteralForTriple(Object subject,Object predicate,Object object) throws ParseException {
            if (!(predicate instanceof URI))
                throw parseException(new KAON2Exception("Predicate '"+predicate.toString()+"' in construct patterns is not supported."));
            String predicateURI=predicate.toString();
            if ((Namespaces.RDF_NS+"type").equals(predicateURI)) {
                if (!(object instanceof URI))
                    throw parseException(new KAON2Exception("Object '"+object.toString()+"' is not supported in a 'rdf:type' construct pattern."));
                String objectURI=object.toString();
                OWLClass owlClass=KAON2Manager.factory().owlClass(objectURI);
                Term argument=getArgument(subject);
                return KAON2Manager.factory().literal(true,owlClass,new Term[] { argument });
            }
            else {
                Predicate literalPredicate=new org.semanticweb.kaon2.api.reasoner.Query.UntypedPredicate(predicateURI,2);
                Term[] arguments=new Term[2];
                arguments[0]=getArgument(subject);
                arguments[1]=getArgument(object);
                return KAON2Manager.factory().literal(true,literalPredicate,arguments);
            }
        }
   }

  final public void Query() throws ParseException {
    Prolog();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      SelectClause();
      break;
    case ASK:
      AskClause();
      break;
    case CONSTRUCT:
      ConstructClause();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      DatasetClause();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    WhereClause();
    SolutionModifier();
    jj_consume_token(0);
  }

  final public void Prolog() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      BaseDeclaration();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREFIX:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      PrefixDeclaration();
    }
  }

  final public void BaseDeclaration() throws ParseException {
    URI uri;
    jj_consume_token(BASE);
             m_sparqlRecognized=true;
    uri = QuotedURI();
                                                          m_query.m_baseURI=uri;
  }

  final public void PrefixDeclaration() throws ParseException {
    String prefix;
    URI namespace;
    jj_consume_token(PREFIX);
               m_sparqlRecognized=true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QNAME_NS:
      jj_consume_token(QNAME_NS);
                     prefix=token.image.substring(0,token.image.length()-1);
      namespace = QuotedURI();
      break;
    case COLON:
      jj_consume_token(COLON);
                    prefix="";
      namespace = QuotedURI();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        m_query.m_namespaces.registerPrefix(prefix,namespace.toString());
  }

  final public void SelectClause() throws ParseException {
    Variable variable;
    jj_consume_token(SELECT);
               m_sparqlRecognized=true; m_query.m_queryType=QueryType.SELECT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                                                                                              m_query.m_distinct=true;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
                 m_query.m_selectStar=true;
      break;
    case VAR:
      label_2:
      while (true) {
        variable = Variable();
                                  m_query.m_distinguishedVariables.add(variable);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AskClause() throws ParseException {
    jj_consume_token(ASK);
            m_sparqlRecognized=true; m_query.m_queryType=QueryType.ASK;
  }

  final public void ConstructClause() throws ParseException {
    jj_consume_token(CONSTRUCT);
                  m_sparqlRecognized=true; m_query.m_queryType=QueryType.CONSTRUCT;
    ConstructTemplate();
  }

  final public void DatasetClause() throws ParseException {
    URI uri;
    jj_consume_token(FROM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMED:
      jj_consume_token(NAMED);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    uri = URI();
                                    m_query.m_from=uri.toString();
  }

  final public void SolutionModifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      OrderClause();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      LimitClause();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OFFSET:
      OffsetClause();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  final public void OrderClause() throws ParseException {
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    label_3:
    while (true) {
      OrderCondition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ASC:
      case DESC:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
    }
  }

  final public void OrderCondition() throws ParseException {
    Variable variable;
    boolean sortDirection=true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        jj_consume_token(ASC);
        break;
      case DESC:
        jj_consume_token(DESC);
                           sortDirection=false;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LBRACKET);
      variable = Variable();
      jj_consume_token(RBRACKET);
      break;
    case VAR:
      variable = Variable();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        m_query.m_sortVariables.add(variable); m_query.m_sortDirection.add(sortDirection ? Boolean.TRUE : Boolean.FALSE);
  }

  final public void LimitClause() throws ParseException {
    int limit;
    jj_consume_token(LIMIT);
    limit = Integer();
                              m_query.m_limit=limit;
  }

  final public void OffsetClause() throws ParseException {
    int offset;
    jj_consume_token(OFFSET);
    offset = Integer();
                                m_query.m_offset=offset;
  }

  final public void WhereClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    GroupGraphPattern(m_query.m_wherePattern);
  }

  final public void ConstructTemplate() throws ParseException {
    m_query.m_constructPattern=new GroupGraphPattern();
    jj_consume_token(LBRACE);
    ConstructPattern();
    label_4:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(DOT);
      ConstructPattern();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void ConstructPattern() throws ParseException {
    if (jj_2_2(3)) {
      Triples(m_query.m_constructPattern,m_headTripleConverter);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CL:
      case DP:
      case OP:
      case AP:
      case NOP:
        ExplicitAtom(m_query.m_constructPattern);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void GroupGraphPattern(GroupGraphPattern groupGraphPattern) throws ParseException {
    jj_consume_token(LBRACE);
    PatternElementsList(groupGraphPattern);
    jj_consume_token(RBRACE);
  }

  final public void PatternElementsList(GroupGraphPattern groupGraphPattern) throws ParseException {
    PatternElement(groupGraphPattern);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_URI:
      case QNAME_NS:
      case QNAME:
      case VAR:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case OPTIONAL:
      case FILTER:
      case EVALUATE:
      case NOT:
      case TRUE:
      case FALSE:
      case CL:
      case DP:
      case OP:
      case AP:
      case NOP:
      case LPARENTHESIS:
      case LBRACE:
        PatternElementsList(groupGraphPattern);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void PatternElement(GroupGraphPattern groupGraphPattern) throws ParseException {
    if (jj_2_3(3)) {
      Triples(groupGraphPattern,m_bodyTripleConverter);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILTER:
        Filter(groupGraphPattern);
        break;
      case EVALUATE:
        Evaluate(groupGraphPattern);
        break;
      case CL:
      case DP:
      case OP:
      case AP:
      case NOP:
        ExplicitAtom(groupGraphPattern);
        break;
      case NOT:
        NotPattern(groupGraphPattern);
        break;
      case OPTIONAL:
        OptionalPattern(groupGraphPattern);
        break;
      case LBRACE:
        GroupOrUnionGraphPattern(groupGraphPattern);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NotPattern(GroupGraphPattern groupGraphPattern) throws ParseException {
    NotPattern notPattern=new NotPattern();
    groupGraphPattern.m_notPatterns.add(notPattern);
    jj_consume_token(NOT);
    GroupGraphPattern(notPattern.m_groupGraphPattern);
  }

  final public void OptionalPattern(GroupGraphPattern groupGraphPattern) throws ParseException {
    OptionalPattern optionalPattern=new OptionalPattern();
    groupGraphPattern.m_optionalPatterns.add(optionalPattern);
    jj_consume_token(OPTIONAL);
    GroupGraphPattern(optionalPattern.m_groupGraphPattern);
  }

  final public void GroupOrUnionGraphPattern(GroupGraphPattern groupGraphPattern) throws ParseException {
    UnionPattern unionPattern=new UnionPattern();
    groupGraphPattern.m_unionPatterns.add(unionPattern);
    GroupGraphPattern nestedGroupGraphPattern;
      nestedGroupGraphPattern=new GroupGraphPattern();
    GroupGraphPattern(nestedGroupGraphPattern);
                                                                                                      unionPattern.m_patterns.add(nestedGroupGraphPattern);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_5;
      }
      jj_consume_token(UNION);
                nestedGroupGraphPattern=new GroupGraphPattern();
      GroupGraphPattern(nestedGroupGraphPattern);
                                                                                                                unionPattern.m_patterns.add(nestedGroupGraphPattern);
    }
  }

  final public void ExplicitAtom(GroupGraphPattern groupGraphPattern) throws ParseException {
    Object predicate;
    List<Term> arguments=new ArrayList<Term>();
    Object object;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CL:
      predicate = OWLClass();
      break;
    case OP:
      predicate = ObjectProperty();
      break;
    case DP:
      predicate = DataProperty();
      break;
    case AP:
      predicate = AnnotationProperty();
      break;
    case NOP:
      jj_consume_token(NOP);
      predicate = URI();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_URI:
      case QNAME_NS:
      case QNAME:
      case VAR:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case TRUE:
      case FALSE:
      case DP:
      case OP:
      case AP:
      case LPARENTHESIS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      object = VarOrTerm();
                                      arguments.add(getArgument(object));
    }
    jj_consume_token(RBRACKET);
        Predicate literalPredicate;
        if (predicate instanceof Predicate)
            literalPredicate=(Predicate)predicate;
        else
            literalPredicate=KAON2Manager.factory().predicateSymbol(((URI)predicate).toString(),arguments.size());
        Literal literal=KAON2Manager.factory().literal(true,literalPredicate,arguments);
        groupGraphPattern.m_literals.add(literal);
  }

  final public void Filter(GroupGraphPattern groupGraphPattern) throws ParseException {
    ExpressionHolder expression=new ExpressionHolder();
    jj_consume_token(FILTER);
    Expression(expression);
                                      groupGraphPattern.m_literals.add(expression.toIfTrueLiteral());
  }

  final public void Evaluate(GroupGraphPattern groupGraphPattern) throws ParseException {
    Variable variable;
    ExpressionHolder expression=new ExpressionHolder();
    jj_consume_token(EVALUATE);
    variable = Variable();
    jj_consume_token(ASSIGN);
    Expression(expression);
                                                                     groupGraphPattern.m_literals.add(expression.toEvaluateLiteral(variable));
  }

  final public void Triples(GroupGraphPattern groupGraphPattern,TripleConverter tripleConverter) throws ParseException {
    Object subject;
    subject = VarOrTerm();
    PropertyListNotEmpty(groupGraphPattern,tripleConverter,subject);
  }

  final public void PropertyListNotEmpty(GroupGraphPattern groupGraphPattern,TripleConverter tripleConverter,Object subject) throws ParseException {
    Object predicate;
    predicate = VarOrURI();
    ObjectList(groupGraphPattern,tripleConverter,subject,predicate);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_URI:
      case QNAME_NS:
      case QNAME:
      case VAR:
        PropertyListNotEmpty(groupGraphPattern,tripleConverter,subject);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void ObjectList(GroupGraphPattern groupGraphPattern,TripleConverter tripleConverter,Object subject,Object predicate) throws ParseException {
    Object object;
    Literal literal;
    object = VarOrTerm();
                         literal=tripleConverter.getLiteralForTriple(subject,predicate,object); groupGraphPattern.m_literals.add(literal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_URI:
      case QNAME_NS:
      case QNAME:
      case VAR:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case TRUE:
      case FALSE:
      case DP:
      case OP:
      case AP:
      case LPARENTHESIS:
        ObjectList(groupGraphPattern,tripleConverter,subject,predicate);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  final public Object VarOrTerm() throws ParseException {
    Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      result = Variable();
      break;
    case Q_URI:
    case QNAME_NS:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case TRUE:
    case FALSE:
    case DP:
    case OP:
    case AP:
    case LPARENTHESIS:
      result = GraphTerm();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Object VarOrURI() throws ParseException {
    Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      result = Variable();
      break;
    case Q_URI:
    case QNAME_NS:
    case QNAME:
      result = URI();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                            {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Variable Variable() throws ParseException {
    jj_consume_token(VAR);
            {if (true) return KAON2Manager.factory().variable(token.image.substring(1));}
    throw new Error("Missing return statement in function");
  }

  final public Object GraphTerm() throws ParseException {
    Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_URI:
    case QNAME_NS:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case TRUE:
    case FALSE:
    case DP:
    case OP:
    case AP:
      result = RDFTerm();
      break;
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
      jj_consume_token(RPARENTHESIS);
                                              result=URI.create(Namespaces.RDF_NS+"nil");
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Object RDFTerm() throws ParseException {
    Object result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_URI:
    case QNAME_NS:
    case QNAME:
      result = URI();
      break;
    case OP:
      result = ObjectProperty();
      break;
    case DP:
      result = DataProperty();
      break;
    case AP:
      result = AnnotationProperty();
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
      result = RDFLiteral();
      break;
    case INTEGER_10:
    case FLOATING_POINT:
      result = NumericLiteral();
      break;
    case TRUE:
    case FALSE:
      result = BooleanLiteral();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public OWLClass OWLClass() throws ParseException {
    URI owlClassURI;
    jj_consume_token(CL);
    owlClassURI = URI();
                             {if (true) return KAON2Manager.factory().owlClass(owlClassURI.toString());}
    throw new Error("Missing return statement in function");
  }

  final public ObjectProperty ObjectProperty() throws ParseException {
    URI objectPropertyURI;
    jj_consume_token(OP);
    objectPropertyURI = URI();
                                   {if (true) return KAON2Manager.factory().objectProperty(objectPropertyURI.toString());}
    throw new Error("Missing return statement in function");
  }

  final public DataProperty DataProperty() throws ParseException {
    URI dataPropertyURI;
    jj_consume_token(DP);
    dataPropertyURI = URI();
                                 {if (true) return KAON2Manager.factory().dataProperty(dataPropertyURI.toString());}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationProperty AnnotationProperty() throws ParseException {
    URI annotationPropertyURI;
    jj_consume_token(AP);
    annotationPropertyURI = URI();
                                       {if (true) return KAON2Manager.factory().annotationProperty(annotationPropertyURI.toString());}
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL1:
      jj_consume_token(STRING_LITERAL1);
      break;
    case STRING_LITERAL2:
      jj_consume_token(STRING_LITERAL2);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                 {if (true) return token.image.substring(1,token.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

  final public Object RDFLiteral() throws ParseException {
    String literalValue;
    String language=null;
    URI datatypeURI=null;
    literalValue = String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LANGTAG:
    case HATHAT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANGTAG:
        jj_consume_token(LANGTAG);
                    language=token.image.substring(1);
        break;
      case HATHAT:
        jj_consume_token(HATHAT);
        datatypeURI = URI();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
        if (datatypeURI==null)
            datatypeURI=URI.create(Namespaces.XSD_NS+"string");
        if (language!=null && (Namespaces.XSD_NS+"string").equals(datatypeURI))
            {if (true) return new StringWithLanguage(literalValue,language);}
        else {
            try {
                {if (true) return DatatypeManager.INSTANCE.parseObject(literalValue,datatypeURI.toString());}
            }
            catch (KAON2Exception error) {
                {if (true) throw parseException(error);}
            }
        }
    throw new Error("Missing return statement in function");
  }

  final public boolean BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
             {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                                        {if (true) return false;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Number NumericLiteral() throws ParseException {
    Number result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_10:
      result = Integer();
      break;
    case FLOATING_POINT:
      result = FloatingPoint();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public int Integer() throws ParseException {
    jj_consume_token(INTEGER_10);
        try {
            {if (true) return Integer.parseInt(token.image);}
        }
        catch (NumberFormatException error) {
            {if (true) throw parseException(error);}
        }
    throw new Error("Missing return statement in function");
  }

  final public double FloatingPoint() throws ParseException {
    jj_consume_token(FLOATING_POINT);
        try {
            {if (true) return Double.parseDouble(token.image);}
        }
        catch (NumberFormatException error) {
            {if (true) throw parseException(error);}
        }
    throw new Error("Missing return statement in function");
  }

  final public URI URI() throws ParseException {
    URI uri;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_URI:
      uri = QuotedURI();
      break;
    case QNAME_NS:
    case QNAME:
      uri = QName();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                        {if (true) return uri;}
    throw new Error("Missing return statement in function");
  }

  final public URI QName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QNAME:
      jj_consume_token(QNAME);
      break;
    case QNAME_NS:
      jj_consume_token(QNAME_NS);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               {if (true) return resolveURI(m_query.m_namespaces.expandString(token.image));}
    throw new Error("Missing return statement in function");
  }

  final public URI QuotedURI() throws ParseException {
    jj_consume_token(Q_URI);
              {if (true) return resolveURI(token.image.substring(1,token.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  final public void Expression(ExpressionHolder expression) throws ParseException {
    ConditionalOrExpression(expression);
  }

  final public void ConditionalOrExpression(ExpressionHolder expression) throws ParseException {
    ConditionalAndExpression(expression);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_7;
      }
      jj_consume_token(OR);
                                                  expression.append(" || ");
      ConditionalAndExpression(expression);
    }
  }

  final public void ConditionalAndExpression(ExpressionHolder expression) throws ParseException {
    ConditionalNotExpression(expression);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
                                                   expression.append(" && ");
      ConditionalNotExpression(expression);
    }
  }

  final public void ConditionalNotExpression(ExpressionHolder expression) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
               expression.append(" ! ");
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    RelationalExpression(expression);
  }

  final public void RelationalExpression(ExpressionHolder expression) throws ParseException {
    NumericExpression(expression);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NEQ:
    case GT:
    case LT:
    case LE:
    case GE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
               token.image="==";
        break;
      case NEQ:
        jj_consume_token(NEQ);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LT:
        jj_consume_token(LT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                           expression.append(' '); expression.append(token.image); expression.append(' ');
      NumericExpression(expression);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  final public void NumericExpression(ExpressionHolder expression) throws ParseException {
    AdditiveExpression(expression);
  }

  final public void AdditiveExpression(ExpressionHolder expression) throws ParseException {
    MultiplicativeExpression(expression);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                             expression.append(' '); expression.append(token.image); expression.append(' ');
      MultiplicativeExpression(expression);
    }
  }

  final public void MultiplicativeExpression(ExpressionHolder expression) throws ParseException {
    UnaryExpression(expression);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REMINDER:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case REMINDER:
        jj_consume_token(REMINDER);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                          expression.append(' '); expression.append(token.image); expression.append(' ');
      UnaryExpression(expression);
    }
  }

  final public void UnaryExpression(ExpressionHolder expression) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                         expression.append(" - ");
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    CallExpression(expression);
  }

  final public void CallExpression(ExpressionHolder expression) throws ParseException {
    if (jj_2_4(2)) {
      FunctionCall(expression);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_URI:
      case QNAME_NS:
      case QNAME:
      case VAR:
      case INTEGER_10:
      case FLOATING_POINT:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case TRUE:
      case FALSE:
      case DP:
      case OP:
      case AP:
      case LPARENTHESIS:
        PrimaryExpression(expression);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FunctionCall(ExpressionHolder expression) throws ParseException {
    URI functionURI;
    String functionName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION_NAME:
      jj_consume_token(FUNCTION_NAME);
                        functionName=token.image;
      break;
    case Q_URI:
    case QNAME_NS:
    case QNAME:
      functionURI = URI();
                                                                          functionName=functionURI.toString();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                     expression.append(functionName);
    jj_consume_token(LPARENTHESIS);
                     expression.append('(');
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_URI:
    case QNAME_NS:
    case QNAME:
    case VAR:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case TRUE:
    case FALSE:
    case DP:
    case OP:
    case AP:
    case LPARENTHESIS:
    case BANG:
    case PLUS:
    case MINUS:
    case FUNCTION_NAME:
      ArgList(expression);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(RPARENTHESIS);
                                                                                         expression.append(')');
  }

  final public void ArgList(ExpressionHolder expression) throws ParseException {
    Expression(expression);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
                                       expression.append(" , ");
      Expression(expression);
    }
  }

  final public void PrimaryExpression(ExpressionHolder expression) throws ParseException {
    Object object;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      object = Variable();
                        expression.append((Variable)object);
      break;
    case Q_URI:
    case QNAME_NS:
    case QNAME:
    case INTEGER_10:
    case FLOATING_POINT:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case TRUE:
    case FALSE:
    case DP:
    case OP:
    case AP:
      object = RDFTerm();
                         expression.appendData(object);
      break;
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
                       expression.append(" ( ");
      Expression(expression);
      jj_consume_token(RPARENTHESIS);
                                                                                           expression.append(" ) ");
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(HATHAT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(AP)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(Q_URI)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(DP)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(NOP)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(OP)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(CL)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(FUNCTION_NAME)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(FLOATING_POINT)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(INTEGER_10)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_31()) return true;
    return false;
  }

  public SPARQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x64000000,0x80000000,0x1000000,0x2000000,0x100,0x8000000,0x400,0x400,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0xcc0780,0x0,0x0,0x0,0x0,0xcc0780,0x780,0x0,0xcc0780,0x0,0xcc0780,0x780,0xcc0380,0xcc0380,0xc00000,0x800,0x800,0x0,0xc0000,0x380,0x300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcc0780,0x380,0xcc0780,0x0,0xcc0780,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x1,0x100,0x1000,0x2000,0xc00,0xc00,0xc00,0x2,0x20000000,0x1f0000,0xbfc0f0,0x20000000,0x9f00f0,0x8,0x1f0000,0x2ec000,0x0,0x8000000,0x2ec000,0x10000000,0x2ec000,0x0,0x2ec000,0xec000,0x0,0x0,0x0,0xc000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2ec000,0x0,0x402ec000,0x10000000,0x2ec000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x0,0x40,0x80,0x0,0x3f,0x3f,0x300,0x300,0x1c00,0x1c00,0x300,0x300,0x0,0x8000,0x8300,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public VPSPARQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public VPSPARQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SPARQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public VPSPARQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SPARQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public VPSPARQLParser(SPARQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SPARQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[80];
    for (int i = 0; i < 80; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 80; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
